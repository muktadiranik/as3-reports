# Generated by Django 4.0.3 on 2023-01-10 22:24

import as3.core.models.managers.user
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('profile', models.CharField(choices=[('Admin', 'Admin'), ('Superadmin', 'Superadmin'), ('Company', 'Company'), ('Student', 'Student'), ('Group', 'Group'), ('Team', 'Team')], db_column='profile', db_index=True, max_length=63, null=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='Email Address')),
                ('active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('emailVerified', models.BooleanField(default=False)),
                ('tokenExpired', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Users',
                'verbose_name_plural': 'Users',
                'db_table': 'api_basic_users',
            },
            managers=[
                ('objects', as3.core.models.managers.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=180, unique=True)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'company',
                'verbose_name_plural': 'companies',
                'db_table': 'api_basic_companies',
            },
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('units', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'country',
                'verbose_name_plural': 'countries',
                'db_table': 'api_basic_countries',
            },
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eventDate', models.DateField(db_index=True)),
                ('idealTime', models.FloatField()),
                ('conePenalty', models.IntegerField()),
                ('gatePenalty', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('isOpenEnrollment', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'api_basic_courses',
            },
        ),
        migrations.CreateModel(
            name='Exercises',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Exercise',
                'verbose_name_plural': 'Exercises',
                'db_table': 'api_basic_exercises',
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=180, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('idCountry', models.ForeignKey(db_column='idCountry', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.countries')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'db_table': 'api_basic_groups',
            },
        ),
        migrations.CreateModel(
            name='Locations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address1', models.CharField(blank=True, max_length=120, null=True)),
                ('address2', models.CharField(blank=True, max_length=120, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('idCountry', models.ForeignKey(db_column='idCountry', on_delete=django.db.models.deletion.PROTECT, to='core.countries')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
                'db_table': 'api_basic_locations',
            },
        ),
        migrations.CreateModel(
            name='Programs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('durationDays', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
            ],
            options={
                'verbose_name': 'program',
                'verbose_name_plural': 'programs',
                'db_table': 'api_basic_programs',
            },
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studentId', models.CharField(blank=True, db_index=True, max_length=63, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email Address')),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('firstName', models.CharField(max_length=100)),
                ('lastName', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('NA', 'Rather not say')], max_length=100)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idUser', models.OneToOneField(db_column='idUser', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'db_table': 'api_basic_students',
                'unique_together': {('firstName', 'lastName', 'birthday')},
            },
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=180, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('idCompany', models.ForeignKey(db_column='idCompany', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.companies')),
                ('idLocation', models.ForeignKey(db_column='idCLocation', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.locations')),
            ],
            options={
                'verbose_name': 'team',
                'verbose_name_plural': 'teams',
                'db_table': 'api_basic_teams',
            },
        ),
        migrations.CreateModel(
            name='Vehicles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('latAcc', models.FloatField()),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
                ('make', models.FloatField(default=0)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='vehicles')),
            ],
            options={
                'verbose_name': 'vehicle',
                'verbose_name_plural': 'vehicles',
                'db_table': 'api_basic_vehicles',
            },
        ),
        migrations.CreateModel(
            name='Venues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('address1', models.CharField(blank=True, max_length=100, null=True)),
                ('address2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('idCountry', models.ForeignKey(db_column='idCountry', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.countries')),
            ],
            options={
                'verbose_name': 'venue',
                'verbose_name_plural': 'venues',
                'db_table': 'api_basic_venues',
            },
        ),
        migrations.CreateModel(
            name='TeamUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idTeam', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.teams')),
                ('idUser', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'team_users',
                'db_table': 'api_basic_team_users',
            },
        ),
        migrations.CreateModel(
            name='TeamStudents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idStudent', models.ForeignKey(db_column='idStudent', on_delete=django.db.models.deletion.PROTECT, to='core.students')),
                ('idTeam', models.ForeignKey(db_column='idTeam', on_delete=django.db.models.deletion.PROTECT, to='core.teams')),
            ],
            options={
                'verbose_name': 'TeamStudent',
                'verbose_name_plural': 'TeamStudents',
                'db_table': 'api_basic_teamstudents',
            },
        ),
        migrations.CreateModel(
            name='Participations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idCompany', models.ForeignKey(db_column='idCompany', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.companies')),
                ('idCourse', models.ForeignKey(db_column='idCourse', on_delete=django.db.models.deletion.PROTECT, to='core.courses')),
                ('idStudent', models.ForeignKey(db_column='idStudent', on_delete=django.db.models.deletion.PROTECT, to='core.students')),
            ],
            options={
                'verbose_name': 'Participation',
                'verbose_name_plural': 'Participations',
                'db_table': 'api_basic_participations',
                'unique_together': {('idCourse', 'idStudent')},
            },
        ),
        migrations.CreateModel(
            name='GroupUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idGroup', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.groups')),
                ('idUser', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'group_users',
                'db_table': 'api_basic_group_users',
            },
        ),
        migrations.CreateModel(
            name='GroupTeams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idGroup', models.ForeignKey(db_column='idGroup', on_delete=django.db.models.deletion.PROTECT, to='core.groups')),
                ('idTeam', models.ForeignKey(db_column='idTeam, db_index = True', on_delete=django.db.models.deletion.PROTECT, to='core.teams')),
            ],
            options={
                'verbose_name': 'GroupTeam',
                'verbose_name_plural': 'GroupTeams',
                'db_table': 'api_basic_groupteams',
            },
        ),
        migrations.CreateModel(
            name='GroupStudents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idGroup', models.ForeignKey(db_column='idGroup', on_delete=django.db.models.deletion.PROTECT, to='core.groups')),
                ('idStudent', models.ForeignKey(db_column='idStudent', on_delete=django.db.models.deletion.PROTECT, to='core.students')),
            ],
            options={
                'verbose_name': 'GroupStudent',
                'verbose_name_plural': 'GroupStudents',
                'db_table': 'api_basic_groupstudents',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('likeMost', models.TextField()),
                ('didntLike', models.TextField()),
                ('futureSuggestion', models.TextField()),
                ('overallFeedback', models.TextField()),
                ('rating', models.IntegerField()),
                ('resolved', models.BooleanField(default=False)),
                ('resolve_comment', models.TextField(blank=True, null=True)),
                ('idCompany', models.ForeignKey(db_column='idCompany', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.companies')),
                ('idUser', models.ForeignKey(db_column='idUser', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Feedback',
                'verbose_name_plural': 'Feedbacks',
                'db_table': 'api_basic_feedback',
            },
        ),
        migrations.CreateModel(
            name='ExercisesSelected',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chord', models.FloatField()),
                ('mo', models.FloatField()),
                ('idCourse', models.ForeignKey(db_column='idCourse', on_delete=django.db.models.deletion.PROTECT, to='core.courses')),
                ('idExercise', models.ForeignKey(db_column='idExercise', on_delete=django.db.models.deletion.PROTECT, to='core.exercises')),
            ],
            options={
                'verbose_name': 'ExerciseSelected',
                'verbose_name_plural': 'ExercisesSelected',
                'db_table': 'api_basic_exercisesselected',
                'unique_together': {('idCourse', 'idExercise')},
            },
        ),
        migrations.CreateModel(
            name='DataFinalExerciseComputed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stress', models.IntegerField()),
                ('revSlalom', models.FloatField()),
                ('slalom', models.FloatField()),
                ('laneChange', models.FloatField()),
                ('penalty', models.IntegerField()),
                ('finalTime', models.FloatField()),
                ('finalResult', models.FloatField()),
                ('idParticipation', models.ForeignKey(db_column='idParticipation', on_delete=django.db.models.deletion.PROTECT, to='core.participations')),
                ('idVehicle', models.ForeignKey(db_column='idVehicle', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.vehicles')),
            ],
            options={
                'verbose_name': 'DataFinalExercisePc',
                'verbose_name_plural': 'DataFinalExercisesPc',
                'db_table': 'api_basic_datafinalexercisepc',
            },
        ),
        migrations.CreateModel(
            name='DataFinalExercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stressLevel', models.IntegerField()),
                ('revSlalom', models.FloatField(blank=True, null=True)),
                ('slalom', models.FloatField(blank=True, null=True)),
                ('laneChange', models.FloatField(blank=True, null=True)),
                ('cones', models.IntegerField()),
                ('gates', models.IntegerField()),
                ('time', models.FloatField()),
                ('idParticipation', models.ForeignKey(db_column='idParticipation', on_delete=django.db.models.deletion.PROTECT, to='core.participations')),
                ('idVehicle', models.ForeignKey(db_column='idVehicle', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.vehicles')),
            ],
            options={
                'verbose_name': 'DataFinalExercise',
                'verbose_name_plural': 'DataFinalExercises',
                'db_table': 'api_basic_datafinalexercise',
            },
        ),
        migrations.CreateModel(
            name='DataExercises',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speedReq', models.IntegerField()),
                ('v1', models.FloatField()),
                ('v2', models.FloatField()),
                ('v3', models.FloatField()),
                ('penalties', models.BooleanField()),
                ('pExercise', models.FloatField(blank=True, default=0.0, null=True)),
                ('pVehicle', models.FloatField(blank=True, default=0.0, null=True)),
                ('idExerciseSelected', models.ForeignKey(db_column='idExerciseSelected', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.exercisesselected')),
                ('idParticipation', models.ForeignKey(db_column='idParticipation', on_delete=django.db.models.deletion.PROTECT, to='core.participations')),
                ('idVehicle', models.ForeignKey(db_column='idVehicle', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.vehicles')),
            ],
            options={
                'verbose_name': 'DataExercise',
                'verbose_name_plural': 'DataExercises',
                'db_table': 'api_basic_dataexercises',
            },
        ),
        migrations.AddField(
            model_name='courses',
            name='idProgram',
            field=models.ForeignKey(db_column='idProgram', on_delete=django.db.models.deletion.PROTECT, to='core.programs'),
        ),
        migrations.AddField(
            model_name='courses',
            name='idVenue',
            field=models.ForeignKey(db_column='idVenue', on_delete=django.db.models.deletion.PROTECT, to='core.venues'),
        ),
        migrations.CreateModel(
            name='CourseDataUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('comment', models.TextField(blank=True, null=True)),
                ('file', models.FileField(upload_to='course_zip/%Y-%m')),
                ('exception', models.TextField(blank=True, null=True)),
                ('idCourse', models.ForeignKey(blank=True, db_column='idCourse', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.courses')),
                ('idUser', models.ForeignKey(blank=True, db_column='idUser', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'CourseDataUpload',
                'verbose_name_plural': 'CourseDataUploads',
                'db_table': 'api_basic_course_data_upload',
            },
        ),
        migrations.CreateModel(
            name='CompanyUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idCompany', models.ForeignKey(db_column='idCompany', on_delete=django.db.models.deletion.PROTECT, to='core.companies')),
                ('idUser', models.OneToOneField(db_column='idUser', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'company_users',
                'db_table': 'api_basic_company_users',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('idParticipation', models.ForeignKey(db_column='idParticipation', on_delete=django.db.models.deletion.PROTECT, to='core.participations')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'db_table': 'api_basic_comments',
            },
        ),
        migrations.AddField(
            model_name='users',
            name='idCountry',
            field=models.ForeignKey(db_column='idCountry', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.countries'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='courses',
            unique_together={('idVenue', 'idProgram', 'eventDate')},
        ),
    ]
